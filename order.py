from random import randint
from typing import Callable

import click

from pizza import BasePizza, Margherita, Hawaiian, Pepperoni

MENU = {'Margherita': Margherita(), 'Hawaiian': Hawaiian(), 'Pepperoni': Pepperoni()}


def log(text: str):
    """–í—ã–≤–æ–¥–∏—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è:
    –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ"""

    def wrapper(func: Callable):
        def decorated(*args, **kwargs):
            print(text.format(randint(5, 15)))
            return func(*args, **kwargs)

        return decorated

    return wrapper


@log('üç≥ –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} —Å!')
def bake(pizza: BasePizza) -> None:
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    return None


@log('üöó –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} —Å!')
def deliver(pizza: BasePizza) -> None:
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    return None


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {} —Å!')
def pickup(pizza: BasePizza) -> None:
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    return None


@click.group()
def cli() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    return None


@cli.command()
@click.option(
    '--size',
    type=click.Choice(list(BasePizza.SIZE), case_sensitive=False),
    prompt='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–∏—Ü—Ü—ã',
    help=f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {", ".join(list(BasePizza.SIZE))}')
@click.option(
    '--delivery',
    prompt='–î–æ—Å—Ç–∞–≤–∫–∞?',
    default=False,
    is_flag=True,
    help='–£–∫–∞–∂–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞')
@click.argument('pizza', nargs=1)
def order(pizza: str, size: str, delivery: bool) -> None:
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    pizza = pizza.capitalize()
    if pizza not in [pizza_subclass.__name__ for pizza_subclass in BasePizza.__subclasses__()]:
        print(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç –ø–∏—Ü—Ü—ã {pizza} \n' \
              '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ü—Ü—ã –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ menu')
        return None
    print(f'–ó–∞–∫–∞–∑: –ø–∏—Ü—Ü–∞ {pizza} {size}')
    pizza_to_cook = MENU[pizza]
    bake(pizza_to_cook)
    if delivery:
        deliver(pizza_to_cook)
    else:
        pickup(pizza_to_cook)
    return None


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    for pizza_subclass in BasePizza.__subclasses__():
        print(f'- {pizza_subclass()}: {", ".join(list(pizza_subclass().dict()))}')


if __name__ == '__main__':
    cli()
